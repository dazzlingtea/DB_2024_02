-- rownum : 오라클에서 부여하는 가상의 순번

SELECT rownum, employee_id
FROM employees;

SELECT rownum, employee_id
FROM employees
WHERE rownum <= 5;

SELECT rownum, employee_id, DEPARTMENT_ID 
FROM employees
WHERE DEPARTMENT_ID = 80 AND rownum <= 5;

-- 급여 내림차순으로 정렬하고 급여 순위가 1~5위인 사원만 조회하기
SELECT rownum, employee_id, salary
FROM EMPLOYEES
WHERE rownum <= 5
ORDER BY SALARY DESC;

-- 실제로 급여 내림차순으로 데이터 정렬해서 조회
-- rownum이 order by보다 먼저 부여되기 때문에
-- 정렬하고 5개를 가져오는게 아닌 5개를 가져오고 정렬이 진행된다
SELECT salary
FROM EMPLOYEES
ORDER BY SALARY DESC;

-- employees 테이블이 아닌 급여 내림차순으로 정렬된 데이터를
-- 가상의 테이블로 사용한다(인라인뷰)
SELECT rownum, employee_id, salary
FROM (SELECT * FROM employees ORDER BY salary DESC)
WHERE rownum <= 5;


SELECT rownum, rn, employee_id, salary
FROM (SELECT rownum AS rn, employee_id, salary
	FROM EMPLOYEES e
	ORDER BY salary desc)
WHERE rownum <= 5;

-- 1~5번에 해당하는 사원을 조회한다
SELECT rownum, employee_id
FROM employees
WHERE rownum <= 5;

-- 6~10번에 해당하는 사원을 조회한다
-- 아무 결과도 안 나옴 -> rownum은 무조건 1부터 시작
SELECT rownum, employee_id
FROM employees
WHERE rownum BETWEEN 6 AND 10;

-- rownum은 반드시 1부터 시작해야 한다
-- 1부터 증가
SELECT rownum, employee_id
FROM EMPLOYEES e
WHERE rownum = 1;

-- 인라인뷰 rownum은 between, 2 시작 가능
-- 6~10번에 해당하는 사원을 조회하기 위해 인라인뷰를 사용한다
SELECT rownum, e.rn, e.employee_id
FROM (SELECT rownum AS rn, employee_id FROM employees) e
WHERE e.rn BETWEEN 6 AND 10;

/*
 * 급여가 높은 순서로 6~10위 사원의 급여 조회하기
 * 1. rownum은 1부터 시작해야 한다
 * 2. rownum은 정렬되기 전에 order by 부여한다
 */

-- 급여가 높은 순으로 정렬
-- rownum과 자료인덱스 다름
SELECT rownum, salary
FROM EMPLOYEES e
ORDER BY salary DESC;

-- 급여 높은 순으로 순번을 부여하기 위해 인라인뷰를 사용
SELECT rownum, rn, salary
FROM (SELECT rownum AS rn, salary FROM employees ORDER BY salary desc);
-- 이 테이블에서 6~10번 가져올 수 없으니까 다시 인라인뷰 해야 함

-- 6~10위에 해당하는 순번을 위해 인라인뷰를 사용
SELECT rownum, e2.*
FROM (SELECT rownum AS salary_rank, e1.*
	FROM (SELECT rownum AS rn, salary FROM employees ORDER BY 2 desc) e1) e2
WHERE e2.salary_rank BETWEEN 6 AND 10;

/*
 * ROWNUM : 정렬 전에 순번을 붙인다
 * ROW_NUMBER() : 정렬 후에 순번을 붙인다
 * RANK() : 중복 순위가 존재하면 다음 순번을 건너뛴다 1 2 2 4
 * DENSE_RANK() : 중복 순위가 존재해도 다음 순위를 부여한다 1 2 2 3
 */

SELECT rownum
	,ROW_NUMBER() over(ORDER BY salary desc) AS row_fuc
	,rank() OVER(ORDER BY salary desc) AS rank_fuc
	,dense_rank() over(ORDER BY salary desc) AS densc_fuc
	,salary
FROM employees;

-- 급여 내림차순으로 1~5위에 해당하는 사원 조회하기(ROW_NUMBER() 함수 사용)
SELECT ROW_NUMBER() OVER(ORDER BY salary desc), salary
FROM employees;


CREATE TABLE tbl_user(
	name varchar2(1000) -- 유저 이름
	,age NUMBER			-- 유저 나이
	,birth_date DATE	-- 유저 생년월일
	,point NUMBER		-- 유저 포인트 금액
);

/*
 * INSERT : 데이터 삽입(행을 추가한다)
 */
-- 1. 모든 컬럼에 값을 채워서 삽입한다
-- 유저이름, 나이, 생년월일, 포인트 금액에 값을 입력해서 행을 추가한다
INSERT INTO TBL_USER
values('박철수', 20, '2003-04-06', 30);

SELECT * FROM tbl_user;

-- SQL Error [1722] [42000]: ORA-01722: invalid number
-- 숫자 자리에 문자가 들어오면 자동으로 형변환 못해서 에러
--INSERT INTO TBL_USER
--values(21, '나훈아', '2004-09-10', 20);

INSERT INTO TBL_USER
values('나훈아', 21, '2004-09-10', 20);

-- 현재날짜와 시간을 사용할 때는 sysdate 키워드 사용 가능
INSERT INTO TBL_USER
values('김짱구', 21, sysdate, 10);

-- 2. 특정 컬럼에만 값을 채워서 행을 추가한다
INSERT INTO tbl_user()

-- point 컬럼을 지정하지 않아서 null이 들어간다
SELECT * FROM tbl_user;

/*
 * UPDATE : 데이터를 수정한다(행을 수정한다)
 */

UPDATE TBL_USER
SET age = 45;

-- 모든 행의 나이가 45살로 변경되어있다
SELECT * FROM tbl_user;











